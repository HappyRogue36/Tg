import asyncio
import yaml
import time
from pyrogram import Client
from pyrogram.errors import FloodWait
from pyrogram.types import Message
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_config(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


config = load_config('config.yaml')

api_id = config['api_id']
api_hash = config['api_hash']
phone_number = config['phone_number']
bot_token = config['bot_token']
alert_channel = config['alert_channel']
scan_interval = config['scan_interval']
chat_ids = config['chat_ids']
keywords = config['keywords']

bot = Bot(token=config['bot_token'])

dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¢–µ–ª–µ–≥—Ä–∞–º
app = Client("my_account", api_id=api_id, api_hash=api_hash, phone_number=phone_number)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ö–æ–∂–µ—Å—Ç–∏
def check_keywords(message_text):
    for keyword in keywords:
        if fuzz.partial_ratio(keyword.lower(), message_text.lower()) >= 75:
            return True
    return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤
async def process_chat_messages(start_time: datetime):
    for chat_id in chat_ids:
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            async for message in app.get_chat_history(chat_id):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if isinstance(message, Message) and message.text:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if message.date >= start_time:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ —Ç–µ–∫—Å—Ç
                        print(message.text)
                        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–∞
                        if check_keywords(message.text):
                            await send_alert(message)
        except FloodWait as e:
            print(f"Flood wait for {e.x} seconds")
            await asyncio.sleep(e.x)
        except Exception as e:
            print(e)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_alert(message):
    if message.from_user:
        user = message.from_user.username
    else:
        user = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
    alert_text = (
        f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n"
        f"üó£ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {user}\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç:</b> {message.text}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {message.date.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    await bot.send_message(alert_channel, alert_text, parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def job():
    print("–°–∫–∞–Ω–∏—Ä—É–µ–º —á–∞—Ç—ã...")
    await process_chat_messages(datetime.now() - timedelta(minutes=scan_interval))


async def main() -> None:
    async with app:
        while True:
            try:
                await job()
            except Exception as e:
                print(e)
                pass
            time.sleep(scan_interval * 60)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if __name__ == "__main__":
    asyncio.run(main())
